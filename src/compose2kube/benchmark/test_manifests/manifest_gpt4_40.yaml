To convert the provided Docker Compose file into Kubernetes manifests, you'll need to create several Kubernetes objects including Deployment, Service, PersistentVolume, PersistentVolumeClaim, and ConfigMap (for environment variables and entry points). The following is a rough translation of the Compose file into Kubernetes YAML:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: act-sdk-exec-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: act-sdk-exec
  template:
    metadata:
      labels:
        app: act-sdk-exec
    spec:
      containers:
      - name: act-sdk-exec
        image: ${REGISTRY}/${REPOSITORY}/${MAIN_EXEC_IMAGE}
        tty: true
        ports:
        - containerPort: 8002 # GUI_FWD_PORT
        - containerPort: 5003 # WSS_FWD_PORT
        env:
        - name: PYTHONPATH
          value: "/workspace/app-base/src:/workspace"
        volumeMounts:
        - name: workspace-app
          mountPath: /workspace/app
        - name: log-volume
          mountPath: /workspace/app/exec/log
        - name: src-volume
          mountPath: /workspace/app/src
        - name: configs-volume
          mountPath: /workspace/app/exec/configs
        - name: websocket-sv-volume
          mountPath: /workspace/app-base/src/app_base/parts/websocket_sv
        securityContext:
          capabilities:
            add:
            - SYS_ADMIN
          seccompProfile:
            type: Unconfined
        command: ["/bin/sh", "-c"]
        args: ["cd /workspace/app/src && python3 SampleApp.py"]
      volumes:
      - name: workspace-app
        persistentVolumeClaim:
          claimName: workspace-app-pvc
      - name: log-volume
        hostPath:
          path: ./log
      - name: src-volume
        hostPath:
          path: ./app_container/src
      - name: configs-volume
        hostPath:
          path: ./app_container/configs
      - name: websocket-sv-volume
        hostPath:
          path: ./add_components/websocket_sv

---

apiVersion: v1
kind: Service
metadata:
  name: act-sdk-exec-service
spec:
  selector:
    app: act-sdk-exec
  ports:
    - protocol: TCP
      port: 8002
      targetPort: 8002
    - protocol: TCP
      port: 5003
      targetPort: 5003

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: workspace-app-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi # Adjust size as needed
```

Please note that this is a starting point, and you will likely need to adjust it based on your specific environment and requirements. Here are a few things to consider:

1. I used `hostPath` for some volumes, which means the data will be stored on the host where the pod is running. This is not recommended for production use as it ties your data to a specific node. Consider using other types of persistent volumes that are suitable for your environment.

2. The `PersistentVolumeClaim` needs to be properly configured to match the storage provisioner and class in your Kubernetes cluster.

3. The `env` section is currently hard-coded. If you need to use dynamic values from the environment, you may need to create a ConfigMap or Secret and reference them within your deployment.

4. The `depends_on` feature in Docker Compose is not directly translatable to Kubernetes. If the `act-sdk_app` service is critical for the `act-sdk_exec` service, consider implementing readiness and liveness probes to manage dependencies and container lifecycle.

5. The translation assumes that you are using the same namespace for all your Kubernetes objects. If you are using different namespaces, you will need to specify the `namespace` field for each object.

6. The `image` field should contain the full image name including the tag. Make sure to replace the `${REGISTRY}/${REPOSITORY}/${MAIN_EXEC_IMAGE}` with the actual image name and tag.

7. Kubernetes does not directly support the `restart: always` policy. However, Kubernetes' default behavior is to restart failed containers.

8. The use of `SYS_ADMIN` and `securityContext` for containers may require privileged mode depending on your cluster's security policies.

9. The `entrypoint` and `command` are separated in Kubernetes, with `command` replacing the `entrypoint` and `args` replacing the `cmd` in the Docker Compose file.

Make sure to adjust the volume storage, access modes, and any other configurations as per your requirements. Additionally, you may need to apply the appropriate networking policies to ensure your services can communicate as expected.