To convert the given Docker Compose file to Kubernetes manifests, you'll need to create several Kubernetes resources such as a Deployment, Service, ConfigMap, PersistentVolumeClaim (PVC), and PersistentVolume (PV) if necessary. Below is an example of how you might do this:

1. Create the deployment YAML:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: act-sdk-exec
spec:
  replicas: 1
  selector:
    matchLabels:
      app: act-sdk-exec
  template:
    metadata:
      labels:
        app: act-sdk-exec
    spec:
      containers:
      - name: act-sdk-exec
        image: ${REGISTRY}/${REPOSITORY}/${MAIN_EXEC_IMAGE}
        tty: true
        ports:
        - containerPort: 8002
        - containerPort: 5003
        env:
        - name: PYTHONPATH
          value: "/workspace/app-base/src:/workspace"
        volumeMounts:
        - name: workspace-app
          mountPath: /workspace/app
        - name: log
          mountPath: /workspace/app/exec/log
        - name: src
          mountPath: /workspace/app/src
        - name: configs
          mountPath: /workspace/app/exec/configs
        - name: websocket-sv
          mountPath: /workspace/app-base/src/app_base/parts/websocket_sv
        securityContext:
          capabilities:
            add:
            - SYS_ADMIN
          seccompProfile:
            type: Unconfined
        command: ["/bin/sh", "-c"]
        args: ["cd /workspace/app/src && python3 SampleApp.py"]
      volumes:
      - name: workspace-app
        persistentVolumeClaim:
          claimName: workspace-app-pvc
      # The following volume mounts will need to be replaced with PersistentVolumeClaims if they should persist data
      - name: log
        hostPath:
          path: /path/to/log
      - name: src
        hostPath:
          path: /path/to/app_container/src
      - name: configs
        hostPath:
          path: /path/to/app_container/configs
      - name: websocket-sv
        hostPath:
          path: /path/to/add_components/websocket_sv
```

2. Create the service YAML to expose the ports:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: act-sdk-exec
spec:
  selector:
    app: act-sdk-exec
  type: NodePort
  ports:
    - name: gui-port
      protocol: TCP
      port: 8002
      targetPort: 8002
      nodePort: ${GUI_FWD_PORT}
    - name: wss-port
      protocol: TCP
      port: 5003
      targetPort: 5003
      nodePort: ${WSS_FWD_PORT}
```

3. Create the PersistentVolumeClaim YAML for the `workspace-app` volume:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: workspace-app-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
```

Please note that the `hostPath` volumes used here are not suitable for a production environment, as they bind directly to the filesystem of the host node. For a production setup, you would want to use a more resilient storage solution such as a PersistentVolume with a cloud provider's storage service, a network file system, or another type of persistent storage.

Additionally, the environment variables `${REGISTRY}`, `${REPOSITORY}`, `${MAIN_EXEC_IMAGE}`, `${GUI_FWD_PORT}`, and `${WSS_FWD_PORT}` need to be replaced with actual values before applying these manifests.

You will also need to create corresponding PersistentVolumes if necessary, or configure dynamic provisioning with a StorageClass.

Finally, apply these manifests to your Kubernetes cluster using `kubectl`:

```bash
kubectl apply -f act-sdk-exec-deployment.yaml
kubectl apply -f act-sdk-exec-service.yaml
kubectl apply -f workspace-app-pvc.yaml
```

Remember to adjust the manifests as necessary to fit your specific requirements and environment.