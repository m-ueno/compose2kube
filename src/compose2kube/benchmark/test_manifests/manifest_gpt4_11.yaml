To convert the given Docker Compose file to Kubernetes manifests, you'll have to create a few Kubernetes resources, such as Deployment, Service, PersistentVolumeClaim (PVC), and ConfigMap, if necessary. Below is an example of how you could represent your Docker Compose service as Kubernetes manifests:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: act-sdk-exec
spec:
  replicas: 1
  selector:
    matchLabels:
      app: act-sdk-exec
  template:
    metadata:
      labels:
        app: act-sdk-exec
    spec:
      containers:
        - name: act-sdk-exec
          image: ${REGISTRY}/${REPOSITORY}/${MAIN_EXEC_IMAGE}
          tty: true
          ports:
            - containerPort: 8002 # serverアプリとの通信
            - containerPort: 5003 # Websocketとの通信
          env:
            - name: PYTHONPATH
              value: "/workspace/app-base/src:/workspace"
          volumeMounts:
            - name: workspace-app
              mountPath: /workspace/app
            - name: log-volume
              mountPath: /workspace/app/exec/log
            - name: src-volume
              mountPath: /workspace/app/src
            - name: configs-volume
              mountPath: /workspace/app/exec/configs
            - name: websocket-sv-volume
              mountPath: /workspace/app-base/src/app_base/parts/websocket_sv
          securityContext:
            capabilities:
              add: ["SYS_ADMIN"]
            seLinuxOptions:
              type: spc_t
          command: ["/bin/sh", "-c"]
          args: ["cd /workspace/app/src && python3 SampleApp.py"]
      volumes:
        - name: workspace-app
          persistentVolumeClaim:
            claimName: workspace-app-pvc
        - name: log-volume
          hostPath:
            path: /path/on/host/log
        - name: src-volume
          hostPath:
            path: /path/on/host/app_container/src
        - name: configs-volume
          hostPath:
            path: /path/on/host/app_container/configs
        - name: websocket-sv-volume
          hostPath:
            path: /path/on/host/add_components/websocket_sv
---
apiVersion: v1
kind: Service
metadata:
  name: act-sdk-exec-service
spec:
  selector:
    app: act-sdk-exec
  type: NodePort
  ports:
    - name: gui
      port: 8002
      targetPort: 8002
      nodePort: ${GUI_FWD_PORT}
    - name: wss
      port: 5003
      targetPort: 5003
      nodePort: ${WSS_FWD_PORT}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: workspace-app-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

Please note the following:

1. Replace `${REGISTRY}`, `${REPOSITORY}`, `${MAIN_EXEC_IMAGE}`, `${GUI_FWD_PORT}`, and `${WSS_FWD_PORT}` with your actual values or use them as they are if you're setting these values as environment variables.

2. For the volumes, I've used `hostPath` as an example, but you might want to use `PersistentVolumeClaims` or other types of volumes based on your actual infrastructure and storage needs.

3. The `securityContext` is trying to mimic the `cap_add` and `security_opt` settings from Docker Compose, but you should be very careful with these settings as they can affect the security of your cluster.

4. The `Service` type is `NodePort` for simplicity, but you may want to use `ClusterIP` if you're exposing your services internally within the cluster or `LoadBalancer` if you're on a cloud provider that supports it.

5. The `PersistentVolumeClaim` is a simple example and may need to be tailored to your specific storage requirements.

6. This does not handle the `depends_on` field since Kubernetes starts containers based on readiness probes rather than startup order. If order is important, you might need to use init containers or other mechanisms to ensure the proper startup sequence.

7. Adjust the `resources.requests.storage` according to your application's storage needs.

8. You will need to create the necessary directories on your host for `hostPath` volumes and ensure the permissions are set correctly for the pods to access them.

Before applying these manifests, you should replace placeholders with actual values and review the configuration to ensure it fits your requirements and adheres to your cluster's security policies.