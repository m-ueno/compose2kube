To convert the given Docker Compose file to Kubernetes manifests, we'll create a Deployment and a Service for the `act-sdk_exec` service. The volume definitions will be translated to PersistentVolumeClaim (PVC) and ConfigMap or hostPath depending on the requirements. Please note that some features in Docker Compose don't have a direct translation to Kubernetes, such as `depends_on`, `cap_add` and `security_opt`. These will require specific Kubernetes security contexts or init containers to emulate.

Here's a basic conversion to Kubernetes manifests:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: workspace-app-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-configs
data:
  # Include your ./app_container/configs files here as key-value pairs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: act-sdk-exec-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: act-sdk-exec
  template:
    metadata:
      labels:
        app: act-sdk-exec
    spec:
      containers:
        - name: act-sdk-exec
          image: "${REGISTRY}/${REPOSITORY}/${MAIN_EXEC_IMAGE}"
          tty: true
          ports:
            - containerPort: 8002 # serverアプリとの通信
            - containerPort: 5003 # Websocketとの通信
          env:
            - name: PYTHONPATH
              value: "/workspace/app-base/src:/workspace"
            - name: GUI_FWD_PORT
              value: "8002"
            - name: WSS_FWD_PORT
              value: "5003"
          volumeMounts:
            - mountPath: /workspace/app
              name: workspace-app
            - mountPath: /workspace/app/exec/log
              name: log-volume
            - mountPath: /workspace/app/src
              name: source-code
            - mountPath: /workspace/app/exec/configs
              name: app-configs
              subPath: config
            - mountPath: /workspace/app-base/src/app_base/parts/websocket_sv
              name: websocket-sv
          securityContext:
            privileged: true
          command: ["/bin/sh", "-c"]
          args: ["cd /workspace/app/src && python3 SampleApp.py"]
      volumes:
        - name: workspace-app
          persistentVolumeClaim:
            claimName: workspace-app-pvc
        - name: log-volume
          hostPath:
            path: /path/on/host/log # Replace with the actual host path
        - name: source-code
          hostPath:
            path: /path/on/host/app_container/src # Replace with the actual host path
        - name: app-configs
          configMap:
            name: app-configs
        - name: websocket-sv
          hostPath:
            path: /path/on/host/add_components/websocket_sv # Replace with the actual host path
---
apiVersion: v1
kind: Service
metadata:
  name: act-sdk-exec-service
spec:
  selector:
    app: act-sdk-exec
  ports:
    - name: gui
      port: 8002
      targetPort: 8002
    - name: wss
      port: 5003
      targetPort: 5003
  type: NodePort
```

Please replace the `${REGISTRY}`, `${REPOSITORY}`, `${MAIN_EXEC_IMAGE}`, `GUI_FWD_PORT`, and `WSS_FWD_PORT` placeholders with the actual values. Also, adjust the paths for the `hostPath` volumes to point to the correct locations on your Kubernetes nodes, and add the actual files to the `ConfigMap`.

This is a starting point and might need adjustments depending on the specifics of your environment and the actual behavior you want to replicate from Docker Compose in Kubernetes. For example, if you have specific `cap_add` or `security_opt` requirements, you might need to set appropriate `securityContext` fields or use PSP (Pod Security Policy) if your cluster supports it.