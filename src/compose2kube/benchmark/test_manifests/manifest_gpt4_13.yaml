To convert the provided Docker Compose file to Kubernetes manifests, you will need to create several Kubernetes resources such as Deployment, Service, PersistentVolumeClaim, and ConfigMap. Below is a rough conversion of the given compose file to Kubernetes YAML manifests:

Please note that Kubernetes does not handle dependency management in the same way Docker Compose does, so you will need to ensure that the `act-sdk_app` service is running and available before starting `act-sdk_exec`.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: act-sdk-exec
spec:
  replicas: 1
  selector:
    matchLabels:
      app: act-sdk-exec
  template:
    metadata:
      labels:
        app: act-sdk-exec
    spec:
      containers:
        - name: act-sdk-exec
          image: ${REGISTRY}/${REPOSITORY}/${MAIN_EXEC_IMAGE}
          tty: true
          ports:
            - containerPort: 8002 # serverアプリとの通信
            - containerPort: 5003 # Websocketとの通信
          env:
            - name: PYTHONPATH
              value: "/workspace/app-base/src:/workspace"
          volumeMounts:
            - name: workspace-app
              mountPath: /workspace/app
            - name: log
              mountPath: /workspace/app/exec/log
            - name: src
              mountPath: /workspace/app/src
            - name: configs
              mountPath: /workspace/app/exec/configs
            - name: websocket-sv
              mountPath: /workspace/app-base/src/app_base/parts/websocket_sv
          securityContext:
            capabilities:
              add: ["SYS_ADMIN"]
            seccompProfile:
              type: Unconfined
          command: ["/bin/sh", "-c"]
          args: ["cd /workspace/app/src && python3 SampleApp.py"]
      volumes:
        - name: workspace-app
          persistentVolumeClaim:
            claimName: workspace-app-pvc
        - name: log
          hostPath:
            path: /path/to/your/local/log
        - name: src
          hostPath:
            path: /path/to/your/local/app_container/src
        - name: configs
          hostPath:
            path: /path/to/your/local/app_container/configs
        - name: websocket-sv
          hostPath:
            path: /path/to/your/local/add_components/websocket_sv

---
apiVersion: v1
kind: Service
metadata:
  name: act-sdk-exec
spec:
  selector:
    app: act-sdk-exec
  ports:
    - name: gui
      port: 8002
      targetPort: 8002
    - name: wss
      port: 5003
      targetPort: 5003

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: workspace-app-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

Remember the following when using this manifest:

1. Replace the `${REGISTRY}`, `${REPOSITORY}`, and `${MAIN_EXEC_IMAGE}` placeholders with your actual image registry, repository, and image name.
2. Update the `hostPath` volumes with the correct paths to your local directories.
3. The volume `workspace_app` has been replaced with a PersistentVolumeClaim (PVC) named `workspace-app-pvc`, which you can configure according to your storage needs.
4. The `depends_on` directive in the Compose file does not have a direct equivalent in Kubernetes. You will need to handle service dependencies and startup order within your application or by using init containers, readiness probes, and liveness probes.
5. The `restart: always` policy has been omitted as Kubernetes by default restarts failed containers.
6. The ports in the Kubernetes Service are set to match the container ports. Replace `${GUI_FWD_PORT}` and `${WSS_FWD_PORT}` with the actual port numbers if they are statically defined or use environment variables or ConfigMaps to inject these values into your Deployment.
7. Capabilities and security context settings must be reviewed to ensure they are appropriate for your Kubernetes cluster's security policy.

Make sure you review and adjust the manifests to fit into your cluster's specific requirements, and test them thoroughly before deploying to a production environment.