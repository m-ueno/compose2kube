To convert the provided Docker Compose YAML file to Kubernetes manifests, we'll start by creating two main resources: a Deployment and a Service for the `act-sdk_exec` container.

Here's an example of how the Kubernetes manifests could look, with placeholders for your environment variables that you'll need to replace with actual values:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: workspace-app-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: act-sdk-exec-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: act-sdk-exec
  template:
    metadata:
      labels:
        app: act-sdk-exec
    spec:
      containers:
        - name: act-sdk-exec
          image: <REGISTRY>/<REPOSITORY>/<MAIN_EXEC_IMAGE>
          tty: true
          ports:
            - containerPort: 8002
            - containerPort: 5003
          env:
            - name: PYTHONPATH
              value: "/workspace/app-base/src:/workspace"
            - name: GUI_FWD_PORT
              value: "<GUI_FWD_PORT_VALUE>"
            - name: WSS_FWD_PORT
              value: "<WSS_FWD_PORT_VALUE>"
          volumeMounts:
            - name: workspace-app
              mountPath: /workspace/app
            - name: local-log
              mountPath: /workspace/app/exec/log
            - name: local-src
              mountPath: /workspace/app/src
            - name: local-configs
              mountPath: /workspace/app/exec/configs
            - name: websocket-sv
              mountPath: /workspace/app-base/src/app_base/parts/websocket_sv
          securityContext:
            capabilities:
              add:
                - SYS_ADMIN
            seccompProfile:
              type: Unconfined
          command: ["/bin/sh", "-c"]
          args: ["cd /workspace/app/src && python3 SampleApp.py"]
      volumes:
        - name: workspace-app
          persistentVolumeClaim:
            claimName: workspace-app-pvc
        - name: local-log
          hostPath:
            path: /path/on/host/log
        - name: local-src
          hostPath:
            path: /path/on/host/app_container/src
        - name: local-configs
          hostPath:
            path: /path/on/host/app_container/configs
        - name: websocket-sv
          hostPath:
            path: /path/on/host/add_components/websocket_sv
      restartPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: act-sdk-exec-service
spec:
  selector:
    app: act-sdk-exec
  ports:
    - name: gui
      protocol: TCP
      port: <GUI_FWD_PORT>
      targetPort: 8002
    - name: wss
      protocol: TCP
      port: <WSS_FWD_PORT>
      targetPort: 5003
  type: LoadBalancer
```

Please note the following:

1. Replace `<REGISTRY>`, `<REPOSITORY>`, and `<MAIN_EXEC_IMAGE>` with your actual Docker image details.
2. Replace `<GUI_FWD_PORT_VALUE>` and `<WSS_FWD_PORT_VALUE>` with the actual values you want to use for the ports.
3. Adjust the `persistentVolumeClaim` size according to your needs.
4. The `hostPath` volumes are used for simplicity, but in a production environment, you might want to use a different type of volume, such as a `PersistentVolume` and corresponding `PersistentVolumeClaim`s or other volume types supported by your Kubernetes cluster.
5. Make sure to replace `/path/on/host/...` with the actual paths on your host where the data should be stored.
6. `depends_on` is not directly translatable to Kubernetes, but you can create dependencies using init containers or by managing the order of deployment.
7. `restart: always` is translated to `restartPolicy: Always` in the Deployment spec.

Remember to create the necessary PersistentVolume resources if your cluster does not have dynamic provisioning set up. This manifest assumes that all the named volumes from the Compose file are mapped to hostPath volumes for simplicity, but you might need a different setup for your use case.