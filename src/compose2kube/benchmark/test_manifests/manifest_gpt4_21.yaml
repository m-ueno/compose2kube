To convert the provided Docker Compose file into Kubernetes manifests, we need to create a set of resources like Deployments, Services, ConfigMaps, Volumes, etc.

Below is an example conversion of the compose file to Kubernetes manifests:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: workspace-app-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: act-sdk-exec-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: act-sdk-exec
  template:
    metadata:
      labels:
        app: act-sdk-exec
    spec:
      containers:
      - name: act-sdk-exec
        image: ${REGISTRY}/${REPOSITORY}/${MAIN_EXEC_IMAGE}
        tty: true
        ports:
        - containerPort: 8002 # serverアプリとの通信
        - containerPort: 5003 # Websocketとの通信
        env:
        - name: PYTHONPATH
          value: "/workspace/app-base/src:/workspace"
        volumeMounts:
        - name: workspace-app
          mountPath: /workspace/app
        - name: log-volume
          mountPath: /workspace/app/exec/log
        - name: src-volume
          mountPath: /workspace/app/src
        - name: configs-volume
          mountPath: /workspace/app/exec/configs
        - name: websocket-sv-volume
          mountPath: /workspace/app-base/src/app_base/parts/websocket_sv
        securityContext:
          capabilities:
            add: ["SYS_ADMIN"]
          seccompProfile:
            type: Unconfined
        command: ["/bin/sh", "-c"]
        args: ["cd /workspace/app/src && python3 SampleApp.py"]
      volumes:
      - name: workspace-app
        persistentVolumeClaim:
          claimName: workspace-app-pvc
      - name: log-volume
        hostPath:
          path: ./log
          type: Directory
      - name: src-volume
        hostPath:
          path: ./app_container/src
          type: Directory
      - name: configs-volume
        hostPath:
          path: ./app_container/configs
          type: Directory
      - name: websocket-sv-volume
        hostPath:
          path: ./add_components/websocket_sv
          type: Directory

---
apiVersion: v1
kind: Service
metadata:
  name: act-sdk-exec-service
spec:
  selector:
    app: act-sdk-exec
  ports:
  - name: gui-port
    port: ${GUI_FWD_PORT}
    targetPort: 8002
  - name: wss-port
    port: ${WSS_FWD_PORT}
    targetPort: 5003
```

This manifest set includes:

1. A PersistentVolumeClaim for the named volume `workspace_app`.
2. A Deployment for the `act-sdk_exec` service, which includes container configuration. Adjust the `image` field to match your actual image registry/repository/image name.
3. Environment variables, volumes, and ports are set according to the Compose file.
4. A Service to expose the ports for `act-sdk_exec` service.

Note:
- Replace `${REGISTRY}`, `${REPOSITORY}`, `${MAIN_EXEC_IMAGE}`, `${GUI_FWD_PORT}`, and `${WSS_FWD_PORT}` with your actual values.
- PersistentVolumeClaim is created for the named volume. For hostPath volumes, you need to adjust the paths and consider the security implications of using hostPath.
- The `depends_on` field in Compose is not directly translatable to Kubernetes. You would need to ensure dependencies are handled through proper readiness and liveness probes or init containers.
- The `restart: always` policy in Compose translates to a restart policy of `Always` in Kubernetes by default.
- Capabilities and security context are set according to Docker's `cap_add` and `security_opt`.
- The `entrypoint` in Compose is translated to `command` and `args` in Kubernetes.

Remember to replace placeholder variables with actual values and adjust the paths for hostPath volumes as necessary for your environment. Additionally, adapt the security settings to comply with your cluster's security policies.