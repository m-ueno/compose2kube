To convert the provided Docker Compose file to Kubernetes manifests, you would create a Deployment and a Service object for the `act-sdk_exec` service. Below is an example of how this can be done.

**Please Note**: The provided environment variables like `${REGISTRY}`, `${REPOSITORY}`, `${MAIN_EXEC_IMAGE}`, `${GUI_FWD_PORT}`, and `${WSS_FWD_PORT}` need to be replaced with actual values or passed as environment variables to kubectl when applying the manifest. Also, the persistent volume's storage class, access modes, and capacity should be configured according to your cluster's setup.

Here's an example of the Kubernetes manifest:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: act-sdk-exec
spec:
  replicas: 1
  selector:
    matchLabels:
      app: act-sdk-exec
  template:
    metadata:
      labels:
        app: act-sdk-exec
    spec:
      containers:
      - name: exec-container
        image: <REGISTRY>/<REPOSITORY>/<MAIN_EXEC_IMAGE>
        tty: true
        ports:
        - containerPort: 8002 # serverアプリとの通信
        - containerPort: 5003 # Websocketとの通信
        env:
        - name: PYTHONPATH
          value: "/workspace/app-base/src:/workspace"
        volumeMounts:
        - name: workspace-app
          mountPath: /workspace/app
        - name: log-volume
          mountPath: /workspace/app/exec/log
        - name: src-volume
          mountPath: /workspace/app/src
        - name: config-volume
          mountPath: /workspace/app/exec/configs
        - name: websocket-sv-volume
          mountPath: /workspace/app-base/src/app_base/parts/websocket_sv
        securityContext:
          capabilities:
            add: ["SYS_ADMIN"]
          seccompProfile:
            type: Unconfined
        command: ["/bin/sh", "-c"]
        args: ["cd /workspace/app/src && python3 SampleApp.py"]
      volumes:
      - name: workspace-app
        persistentVolumeClaim:
          claimName: workspace-app-pvc
      - name: log-volume
        hostPath:
          path: /path/to/log
      - name: src-volume
        hostPath:
          path: /path/to/app_container/src
      - name: config-volume
        hostPath:
          path: /path/to/app_container/configs
      - name: websocket-sv-volume
        hostPath:
          path: /path/to/add_components/websocket_sv

---
apiVersion: v1
kind: Service
metadata:
  name: act-sdk-exec-service
spec:
  type: NodePort # or LoadBalancer if you want external access
  selector:
    app: act-sdk-exec
  ports:
  - name: gui-port
    port: 8002
    targetPort: 8002
    nodePort: <GUI_FWD_PORT>
  - name: wss-port
    port: 5003
    targetPort: 5003
    nodePort: <WSS_FWD_PORT>

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: workspace-app-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  # storageClassName: <Specify Storage Class if needed>
```

You'll need to replace the placeholders (`<...>`) with actual values. Additionally, you may need to customize the storage options based on your environment (for example, using NFS or other storage backends instead of `hostPath`).

Please check the security implications of using `SYS_ADMIN` and `seccomp:unconfined`, as these settings can introduce significant security risks to your cluster. It's essential to understand the security context in which your application will run and ensure that the least privilege principle is applied.

Furthermore, the `depends_on` directive has no direct translation in Kubernetes, so if the `act-sdk_app` service needs to be up before `act-sdk_exec`, you will have to manage this dependency through your application logic or initialization scripts.

To apply the manifest, save it to a file (e.g., `kubernetes-manifest.yaml`) and run:

```sh
kubectl apply -f kubernetes-manifest.yaml
```

Remember that Kubernetes does not natively support Docker Compose's `build` directive, so you will have to build and push your images to the registry manually or using a CI/CD pipeline before deploying them with Kubernetes.