To convert the above Docker Compose file to Kubernetes manifests, you will need to create several Kubernetes resources such as a Deployment, Service, ConfigMap, PersistentVolumeClaim (PVC), and possibly others depending on your specific requirements. Below is a basic example of what some of these resources might look like based on the provided Compose file.

Note that some Compose features like `depends_on`, `tty`, and `restart: always` don't have direct equivalents in Kubernetes and need to be considered differently. For instance, Kubernetes has liveness and readiness probes to handle container restarts.

Here's how you can translate the given Compose service to Kubernetes manifests:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: act-sdk-exec
spec:
  replicas: 1
  selector:
    matchLabels:
      app: act-sdk-exec
  template:
    metadata:
      labels:
        app: act-sdk-exec
    spec:
      containers:
      - name: act-sdk-exec-container
        image: ${REGISTRY}/${REPOSITORY}/${MAIN_EXEC_IMAGE}
        ports:
        - containerPort: 8002
        - containerPort: 5003
        volumeMounts:
        - name: workspace-app
          mountPath: /workspace/app
        - name: log-volume
          mountPath: /workspace/app/exec/log
        - name: src-volume
          mountPath: /workspace/app/src
        - name: configs-volume
          mountPath: /workspace/app/exec/configs
        - name: websocket-sv-volume
          mountPath: /workspace/app-base/src/app_base/parts/websocket_sv
        securityContext:
          capabilities:
            add:
            - SYS_ADMIN
          seccompProfile:
            type: Unconfined
        env:
        - name: PYTHONPATH
          value: "/workspace/app-base/src:/workspace"
        command: ["/bin/sh", "-c"]
        args: ["cd /workspace/app/src && python3 SampleApp.py"]
      volumes:
      - name: workspace-app
        persistentVolumeClaim:
          claimName: workspace-app-pvc
      - name: log-volume
        hostPath:
          path: /path/on/host/log
      - name: src-volume
        hostPath:
          path: /path/on/host/app_container/src
      - name: configs-volume
        hostPath:
          path: /path/on/host/app_container/configs
      - name: websocket-sv-volume
        hostPath:
          path: /path/on/host/add_components/websocket_sv

---
apiVersion: v1
kind: Service
metadata:
  name: act-sdk-exec
spec:
  selector:
    app: act-sdk-exec
  ports:
  - name: gui-port
    port: ${GUI_FWD_PORT}
    targetPort: 8002
  - name: wss-port
    port: ${WSS_FWD_PORT}
    targetPort: 5003
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: workspace-app-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

Please note:
- Replace `${REGISTRY}`, `${REPOSITORY}`, and `${MAIN_EXEC_IMAGE}` with the appropriate values.
- The `ports` are mapped to `containerPort` in the Kubernetes manifest.
- The `volumes` are mapped to `volumeMounts` and corresponding `volumes` sections in the Kubernetes manifest.
- The `tty`, `depends_on`, and `restart` fields are not directly translatable. For example, `tty` is usually not needed in Kubernetes deployments.
- The `securityContext` is used to set capabilities and the seccomp profile.
- Replace `/path/on/host/...` with the actual paths where you want to store your logs and configurations on the host or consider using other types of volumes suitable for your environment.
- The PersistentVolumeClaim (PVC) is a simple example; you might need to adjust the storage class and permissions according to your needs.
- The `entrypoint` and `command` in the Compose file are translated to `command` and `args` in Kubernetes.

Please adjust the above manifest according to your specific use case, environment, and Kubernetes cluster setup.